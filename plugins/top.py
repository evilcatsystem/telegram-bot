from config import bot, conn, user_id, chat_id
import psycopg2
from telebot import types
import matplotlib.pyplot as plt 
import warnings 
import os
from psycopg2.errors import InFailedSqlTransaction
import datetime
from plugins.error import Error
from plugins.error import in_chat
import sys
from psycopg2.errors import InFailedSqlTransaction
from psycopg2.errors import UndefinedColumn

sys.setrecursionlimit(5000) 
def deletedb(m):
    if int(m.from_user.id) == int(user_id):
        cursor = conn.cursor()
        bot.send_message(m.chat.id, "–£–¥–∞—á–Ω—ã–π –≤—Ö–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        try:
            cursor.execute("DROP TABLE top_users;")
            conn.commit()
            bot.send_message(m.chat.id, "–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        except:
            bot.send_message(m.chat.id, "–¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        bot.send_message(m.chat.id, "–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!")

def createdb(m):
    if int(m.from_user.id) == int(user_id):
        cursor = conn.cursor()
        bot.send_message(m.chat.id, "–£–¥–∞—á–Ω—ã–π –≤—Ö–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö") 
        try:
            cursor.execute('''CREATE TABLE top_users
                    (user_id INT PRIMARY KEY,
                    name text,
                    message text);''')
            conn.commit()
            bot.send_message(m.chat.id, "–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞")
        except:
            bot.send_message(m.chat.id, "–¢–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞")
    else:
        bot.send_message(m.chat.id, "–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!")

@in_chat()
def top(m):
    bot.delete_message(m.chat.id, m.message_id)
    cursor = conn.cursor()
    cursor.execute("SELECT row_number() OVER(ORDER BY message::int DESC), user_id, name, message, new, date_add FROM top_users;")
    rows = cursor.fetchall()
    result_list = []

    beginner = ""
    for row in rows[:10]:
        date = row[5]
        if row[4] == True:
            date = row[5].split()
            year = int (date[0])     # –ì–æ–¥
            month = int (date[1])    # –ú–µ—Å—è—Ü
            day = int (date[2])     # –î–µ–Ω—å

            date_new = datetime.date(year, month, day)
            date_last = datetime.datetime.now().day - date_new.day
            if date_last >= 5:
                cursor.execute(f"""UPDATE top_users SET new = FALSE WHERE user_id = {row[1]};""") 
                cursor.execute(f"UPDATE top_users SET date_add = '' WHERE user_id = {row[1]};")
                conn.commit()
            else:
                beginner = "[–ù–æ–≤–∏—á–æ–∫]"

        number = row[0]
        user_id = row[1]
        last_name = row[2]
        message = row[3]
        result = f'{number} ‚úÖ {last_name} ‚úâ = {message}     {beginner}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'
        result_list.append(result)
        results_lists_last = "\n".join(result_list)
        #______________________________________________________________
    try:
        markup = types.InlineKeyboardMarkup() #–û—Ç–≤–µ—á–∞–µ–º, –µ—Å–ª–∏ –≤—ã—Ö–æ–≤ –±—ã–ª –∏–∑ —Å—É–ø–µ—Ä —á–∞—Ç–∞
        dalee_top = types.InlineKeyboardButton(text='üîú', callback_data="dalee_top") #–û—Ç–≤–µ—á–∞–µ–º, –µ—Å–ª–∏ –≤—ã—Ö–æ–≤ –±—ã–ª –∏–∑ —Å—É–ø–µ—Ä —á–∞—Ç–∞
        delete = types.InlineKeyboardButton(text="‚ùå", callback_data="delete_2")
        markup.add(dalee_top, delete) #–û—Ç–≤–µ—á–∞–µ–º, –µ—Å–ª–∏ –≤—ã—Ö–æ–≤ –±—ã–ª –∏–∑ —Å—É–ø–µ—Ä —á–∞—Ç–∞

        info = rows
        messages_list = []   # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏
        names_list = []

        for line in info[:-10]:               # –ë–µ—Ä–µ–º –∏–º–µ–Ω–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10.  
            if line[2] == "Í≥ºÏùº üçä":
               names_list.append("–§—Ä—É–∫—Ç")         # –°—Ç–∏—Ä–∞–µ–º –Ω–∞—Ö–æ–π —Ñ—Ä—É–∫—Ç–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ –ª–æ–º–∞–µ—Ç –≤—Å–µ —Å–∏—Å—Ç–µ–º—É
               messages_list.append(line[3])      # —Å–≤–æ–∏–º–∏ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞–º–∏

            if line[2] == "üÖ®üÖ§üÖ°üÖ®<üêß>":
               names_list.append("@poruncov")         # –°—Ç–∏—Ä–∞–µ–º –Ω–∞—Ö–æ–π —Ñ—Ä—É–∫—Ç–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ –ª–æ–º–∞–µ—Ç –≤—Å–µ —Å–∏—Å—Ç–µ–º—É
               messages_list.append(line[3])
            else:
                names_list.append(line[2])       # –ï—Å–ª–∏ –∏—Ö –Ω–µ —É–±—Ä–∞—Ç—å —Ç–æ –Ω–∞–¥–ø–∏—Å–∏ –±—É–¥—É—Ç –Ω–∞–ª–∞–∑–∏—Ç—å
                messages_list.append(line[3])    # –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞

        end_messages = []

        for line in info[-10:]:                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–º–µ–Ω
            end_messages.append (int(line[3]))    # –î–æ–±–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
        end_messages = sum(end_messages)          # –°—É–º–º–∏—Ä—É–µ–º –∏—Ö


        labels = names_list
        sizes = messages_list

        labels.append("–î—Ä—É–≥–∏–µ")      
        sizes.append(end_messages)

        with warnings.catch_warnings():
            warnings.simplefilter('ignore')  # –ù–µ –¥–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –≤–∞—Ä–Ω–∏–Ω–≥y
            fig1, ax1 = plt.subplots()
            #plt.style.use(['dark_background'])  # –¢–µ–º–Ω—ã–π —Ñ–æ–Ω, –ª–æ–º–∞–µ—Ç —Ü–≤–µ—Ç–∞
            ax1.pie(sizes, labels=labels, autopct='%1.1f%%',labeldistance = 1.08, startangle = 30, wedgeprops = {'linewidth': 18},
                    shadow=False)

            ax1.axis('equal')
            fig1.savefig('foo.png', bbox_inches='tight')
        bot.send_photo(m.chat.id, open('foo.png', 'rb'));
            #______________________________________________________________
        bot.send_message(m.chat.id, f"üìé–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µüìé\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n{results_lists_last}", reply_markup = markup)
    except InFailedSqlTransaction:
        bot.send_message(m.chat.id, "–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è, –Ω–µ—á–µ–≥–æ –≤—ã–≤–æ–¥–∏—Ç—å")

def writes(m):           # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü—É
    if int(m.chat.id) == int(chat_id):
        cursor = conn.cursor()

        userid = str(m.from_user.id)
        last_name = m.from_user.first_name
        try:
            cursor.execute(f"""INSERT INTO top_users (user_id, name, message, new, root, send_message) VALUES ('{userid}', '{last_name}', 1, TRUE, FALSE, TRUE);""")     # –ö—Ç–æ-—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç –ø—Ä–æ —Ñ—É–Ω–∫—Ü–∏—é zip)

            conn.commit()                                                                                                         
        except:
            conn.rollback()
            write(m)

def write(m):              # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
    if not m.reply_to_message:
        cursor = conn.cursor()

        name = m.from_user.first_name
        userid = str(m.from_user.id)
        try:
            cursor.execute(f"SELECT message from top_users where user_id= {userid};")
            rows = cursor.fetchall()
            result=None
            for row in rows:
                mes = int(row[0]) + int(1)
                result = mes
            cursor.execute(f"UPDATE top_users set message = {str(result)}, name = '{name}' where user_id = {str(userid)};")
        except (UndefinedColumn, InFailedSqlTransaction):
            writes(m)
        finally:
            conn.commit()
    # –û–¥–Ω–∞ –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤ write():
    # –µ—Å–ª–∏ –±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω, –∫—Ç–æ-—Ç–æ –∏ –≤–æ—à–µ–ª –≤ —á–∞—Ç. –¢–æ –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –±–∞–∑—É
    # —á–µ–ª–æ–≤–µ–∫–∞, –∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å—ë –ª–æ–º–∞–µ—Ç—Å—è